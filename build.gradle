//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "https://maven.minecraftforge.net/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://repo.sk1er.club/repository/maven-public" }
    }

    dependencies {
        classpath('com.github.ReplayMod:ForgeGradle:ceb83c0:all')
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.sk1er.club/repository/maven-public" }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.replaymod.preprocess'
apply plugin: 'maven-publish'

version = this.properties.getOrDefault("BUILD_ID", "LOCAL")
group = modGroup
archivesBaseName = modBaseName

kotlin.jvmToolchain {
    languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    version = '1.8.9-11.15.1.2318-1.8.9'
    mappings = "stable_22"
    runDir = "run"
    makeObfSourceJar = false
    clientJvmArgs += ["-Dfml.coreMods.load=club.sk1er.patcher.tweaker.PatcherTweaker", "-Dpatcher.debugBytecode=true", "-Dmixin.debug.verbose=true", "-Dmixin.debug.export=true", "-Dmixin.dumpTargetOnFailure=true"]
    clientRunArgs += ["--tweakClass gg.essential.loader.stage0.EssentialSetupTweaker", "--mixin patcher.mixins.json"]
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    def kotlin_version = "1.5.31"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version") {
        exclude module: "kotlin-stdlib"
    }

    embed "gg.essential:loader-launchwrapper:1.1.1"
    implementation "gg.essential:essential-1.8.9-forge:1470"

    embed("com.github.Sk1erLLC:HookInjection:b9ac92c31e") {
        exclude module: "koffee"
        exclude module: "kotlin-reflect"
        exclude module: "kotlin-stdlib-jdk8"
        exclude module: "asm-debug-all"
    }

    implementation('com.github.half-cambodian-hacker-man:Koffee:d8cee73') {
        exclude module: 'asm-commons'
        exclude module: 'asm-tree'
        exclude module: 'asm'
    }

    annotationProcessor 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
    compileOnly 'org.spongepowered:mixin:0.7.11-SNAPSHOT'

    // Mixin needs these (and depends on them but for some reason that's not enough. FG, did you do that?)
    annotationProcessor 'com.google.code.gson:gson:2.2.4'
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.ow2.asm:asm-tree:6.2'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.0-beta9'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    exclude "META-INF/**"
    copy {
        from("src/main/resources")
        into("build/classes/main")
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

ext {
    mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
    mixinRefMap = new File(project.buildDir, 'tmp/mixins/patcher.mixins.refmap.json')
}

compileJava {
    options.compilerArgs += [
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/mcp-srg.srg').canonicalPath}"
    ]
}

task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from {project.tasks.genSrgs.mcpToSrg}
    into 'build'
}
compileJava.dependsOn copySrg

reobfJar.addSecondarySrgFile project.mixinSrg

jar {
    dependsOn configurations.embed
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'club.sk1er.vigilance.example.ExampleMod', 'dummyThing'
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    from files(project.mixinRefMap.canonicalPath)
    manifest {
        attributes 'FMLCorePlugin': 'club.sk1er.patcher.tweaker.PatcherTweaker',
                'ModSide': 'CLIENT',
                'FMLAT': 'patcher_at.cfg',
                'FMLCorePluginContainsFMLMod': 'Yes, yes it does',
                'Main-Class': 'club.sk1er.container.ContainerMessage',
                'TweakClass': 'gg.essential.loader.stage0.EssentialSetupTweaker',
                'TweakOrder': '0',
                'MixinConfigs': 'patcher.mixins.json'
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += ['-Xopt-in=kotlin.RequiresOptIn', '-Xno-param-assertions']
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "Patcher"
            def mcVersion
            def (major, minor, patch) = project.name.tokenize('-')[0].tokenize('.')
            mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
            version = "${this.properties.getOrDefault("branch", "master") != "master" ? this.properties.getOrDefault("branch", "master") + "-" : ""}${project.version}-$mcVersion${this.properties.getOrDefault("IS_CI", false) ? "-SNAPSHOT" : ""}"

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.name != "forge" && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            artifact jar
        }
    }

    repositories {
        if (project.hasProperty("nexus_user") && project.hasProperty("nexus_password")) {
            maven {
                name 'nexus'
                url "https://repo.sk1er.club/repository/maven-private-${this.properties.getOrDefault("IS_CI", false) ? "snapshots" : "releases"}/"

                credentials {
                    username project.nexus_user
                    password project.nexus_password
                }
            }
        }
    }
}
